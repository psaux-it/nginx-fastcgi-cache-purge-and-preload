name: safexec CI

on:
  push:
    paths:
      - "safexec/safexec.c"
      - "safexec/libnpp_norm.c"
      - "safexec/helpers/deb.sh"
      - ".github/workflows/build-and-commit-safexec.yml"
  workflow_dispatch: {}

concurrency:
  group: build-safexec-${{ github.ref }}
  cancel-in-progress: true

jobs:
  safexec-build-test-attest:
    name: Build & test safexec binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      attestations: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install host build tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y file coreutils binutils sudo
          mkdir -p safexec/bin

      ############################################
      # build-safexec (musl) — x64 + arm64
      ############################################

      # Build static x86_64 (musl) with Alpine
      - name: Build safexec (x86_64 static musl)
        run: |
          set -euo pipefail
          docker run --rm -v "$PWD":/src -w /src/safexec alpine:3.21 sh -euxc '
            apk add --no-cache build-base musl-dev linux-headers
            gcc -static -O2 -pipe -fPIE -pie -fstack-protector-strong -D_FORTIFY_SOURCE=2 \
                -Wl,-z,relro,-z,now safexec.c -o safexec-x86_64-linux-musl
            strip safexec-x86_64-linux-musl
          '

      # Build static aarch64 (musl) with dockcross
      - name: Build safexec (aarch64 static musl)
        run: |
          set -euo pipefail
          # Generate dockcross wrapper for the musl ARM64 toolchain
          docker run --rm dockcross/linux-arm64-musl > ./dockcross
          chmod +x ./dockcross

          # Compile inside the dockcross environment; output to safexec/
          ./dockcross bash -euxc '
            if command -v apt-get >/dev/null 2>&1; then
              apt-get update
              DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends linux-libc-dev
            fi
            aarch64-linux-musl-gcc -static -O2 -pipe -fPIE -pie -fstack-protector-strong -D_FORTIFY_SOURCE=2 \
                -Wl,-z,relro,-z,now safexec/safexec.c -o safexec/safexec-aarch64-linux-musl
            aarch64-linux-musl-strip safexec/safexec-aarch64-linux-musl
          '
      ############################################################
      # build- libnpp_norm.so (LD_PRELOAD shim) — glibc + musl for x64 + arm64
      ############################################################

      # x86_64 (glibc) — build in Debian (bullseye) older glibc (≥2.31)
      - name: Build libnpp_norm shim (x86_64, glibc)
        run: |
          set -euo pipefail
          docker run --rm -v "$PWD":/src -w /src debian:bullseye-slim bash -euxo pipefail -c '
            apt-get update
            apt-get install -y --no-install-recommends build-essential binutils
            gcc -O2 -pipe -fPIC -Wall -Wextra -Wformat=2 -DWGET_FASTPATH \
                -shared safexec/libnpp_norm.c -o safexec/libnpp_norm-x86_64-glibc.so \
                -Wl,-z,relro,-z,now -Wl,-z,noexecstack -Wl,-soname,libnpp_norm.so \
                -Wl,--as-needed -ldl -pthread
            strip --strip-unneeded safexec/libnpp_norm-x86_64-glibc.so
          '

      # x86_64 (musl) — build in Alpine
      - name: Build libnpp_norm shim (x86_64, musl)
        run: |
          set -euo pipefail
          docker run --rm -v "$PWD":/src -w /src/safexec alpine:3.21 sh -euxc '
            apk add --no-cache build-base musl-dev
            gcc -O2 -pipe -fPIC -Wall -Wextra -Wformat=2 -DWGET_FASTPATH \
                -shared libnpp_norm.c -o libnpp_norm-x86_64-musl.so \
                -Wl,-z,relro,-z,now -Wl,-z,noexecstack -Wl,-soname,libnpp_norm.so \
                -Wl,--as-needed -ldl -pthread
            strip --strip-unneeded libnpp_norm-x86_64-musl.so
          '
      # Enable qemu/binfmt
      - name: Enable binfmt for arm64
        run: |
          set -euo pipefail
          docker run --privileged --rm tonistiigi/binfmt --install arm64

      # aarch64 (glibc) — build in Ubuntu focal (arm64) older glibc (≥2.31)
      - name: Build libnpp_norm shim (aarch64, glibc)
        run: |
          set -euo pipefail
          docker run --rm --platform=linux/arm64 -v "$PWD":/src -w /src debian:bullseye-slim bash -euxo pipefail -c '
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends build-essential binutils
            gcc -O2 -pipe -fPIC -Wall -Wextra -Wformat=2 -DWGET_FASTPATH \
              -shared safexec/libnpp_norm.c -o safexec/libnpp_norm-aarch64-glibc.so \
              -Wl,-z,relro,-z,now -Wl,-z,noexecstack -Wl,-soname,libnpp_norm.so \
              -Wl,--as-needed -ldl -pthread
            strip --strip-unneeded safexec/libnpp_norm-aarch64-glibc.so
          '

      # aarch64 (musl) — build in dockcross musl toolchain
      - name: Build libnpp_norm shim (aarch64, musl)
        run: |
          set -euo pipefail
          docker run --rm dockcross/linux-arm64-musl > ./dockcross.musl.arm64
          chmod +x ./dockcross.musl.arm64
          ./dockcross.musl.arm64 bash -euxc '
            aarch64-linux-musl-gcc -O2 -pipe -fPIC -Wall -Wextra -Wformat=2 -DWGET_FASTPATH \
                -shared safexec/libnpp_norm.c -o safexec/libnpp_norm-aarch64-musl.so \
                -Wl,-z,relro,-z,now -Wl,-z,noexecstack -Wl,-soname,libnpp_norm.so \
                -Wl,--as-needed -ldl -pthread
            aarch64-linux-musl-strip --strip-unneeded safexec/libnpp_norm-aarch64-musl.so
          '

      # Sanity: SONAME must be libnpp_norm.so on all shims
      - name: Verify SONAME on shims
        run: |
         set -euo pipefail
         for so in safexec/libnpp_norm-*-glibc.so safexec/libnpp_norm-*-musl.so; do
           test -f "$so" || { echo "Missing $so"; exit 1; }
           echo "Checking SONAME for $so"
           readelf -d "$so" | grep -E 'SONAME.*libnpp_norm\.so' >/dev/null \
             || { echo "Bad/missing SONAME in $so"; exit 1; }
         done

      # Fix ownership of artifacts created by containers
      - name: Fix artifact ownership
        run: |
          set -euo pipefail
          sudo chown "$(id -u)":"$(id -g)" safexec/safexec-*-linux-musl safexec/libnpp_norm-*.so || true
    
      # Sanity check: confirm the safexec binaries are static before checksums
      - name: Verify safexec binaries are static
        run: |
          set -euo pipefail
          ls -l safexec/safexec-*-linux-musl
          file safexec/safexec-*-linux-musl
          for f in safexec/safexec-*-linux-musl; do
            # Fail if an INTERP segment exists (means dynamically linked)
            ! readelf -lW "$f" | grep -q INTERP
          done

      ############################################
      # E2E smoke tests hybrid safexec + shim  (musl:glibc | x86_64:aarch64
      ############################################

      - name: E2E runtime smoke test(x86_64, musl)
        run: |
          set -euo pipefail
          docker run --rm --privileged --cgroupns=host -v /sys/fs/cgroup:/sys/fs/cgroup:rw -v "$PWD":/src -w / alpine:3.21 sh -euxc '
              apk add --no-cache coreutils wget busybox-extras perl socat openssl

              # Install safexec (setuid-root) and the shim (root-owned, not writable)
              install -D /src/safexec/safexec-x86_64-linux-musl /usr/bin/safexec
              chown root:root /usr/bin/safexec
              chmod 4755 /usr/bin/safexec

              install -D /src/safexec/libnpp_norm-x86_64-musl.so /usr/lib/npp/libnpp_norm.so
              chown root:root /usr/lib/npp/libnpp_norm.so
              chmod 0644 /usr/lib/npp/libnpp_norm.so

              # Unprivileged user (simulates PHP-FPM worker)
              adduser -D -s /bin/sh fpm

              # Helpers
              chmod +x /src/safexec/helpers/oneshot.pl
              openssl req -x509 -newkey rsa:2048 -nodes -days 1 \
                -subj "/CN=127.0.0.1" \
                -addext "subjectAltName=IP:127.0.0.1" \
                -keyout /tmp/key.pem -out /tmp/cert.pem >/dev/null 2>&1

              start_https() {
                socat -T1 OPENSSL-LISTEN:8080,reuseaddr,cert=/tmp/cert.pem,key=/tmp/key.pem,verify=0 \
                  SYSTEM:/src/safexec/helpers/oneshot.pl >/dev/null 2>&1 &
                echo $! > /tmp/req1.pid
                sleep 0.5
              }

              stop_https() {
                test -f /tmp/req1.pid && kill -9 "$(cat /tmp/req1.pid)" 2>/dev/null || true
                sleep 0.5
              }

              # 1) upper => %2F%2A
              start_https
              su -s /bin/sh -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=upper SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 >/dev/null || true
              " fpm
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line1
              grep -q "GET /%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 " /tmp/line1 && echo "PASS" || { echo "FAIL"; exit 1; }

              # 2) lower => %2f%2a
              start_https
              su -s /bin/sh -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=lower SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 >/dev/null || true
              " fpm
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line2
              grep -q "GET /%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 " /tmp/line2 && echo "PASS" || { echo "FAIL"; exit 1; }

              # 3) off => preserved mixed case
              start_https
              su -s /bin/sh -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=off SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 >/dev/null || true
              " fpm
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line3
              grep -q "GET /%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 " /tmp/line3 && echo "PASS" || { echo "FAIL"; exit 1; }

              # 3.1) off => preserved mixed case
              start_https
              su -s /bin/sh -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=off SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 >/dev/null || true
              " fpm
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line4
              grep -q "GET /%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 " /tmp/line4 && echo "PASS" || { echo "FAIL"; exit 1; }
            '

      - name: E2E runtime smoke test (aarch64, musl)
        run: |
          set -euo pipefail
          docker run --rm --platform=linux/arm64 --privileged --cgroupns=host -v /sys/fs/cgroup:/sys/fs/cgroup:rw -v "$PWD":/src -w / alpine:3.21 sh -euxc '
              apk add --no-cache coreutils wget busybox-extras perl socat openssl

              # Install safexec (setuid-root) and the shim (root-owned, not writable)
              install -D /src/safexec/safexec-aarch64-linux-musl /usr/bin/safexec
              chown root:root /usr/bin/safexec
              chmod 4755 /usr/bin/safexec

              install -D /src/safexec/libnpp_norm-aarch64-musl.so /usr/lib/npp/libnpp_norm.so
              chown root:root /usr/lib/npp/libnpp_norm.so
              chmod 0644 /usr/lib/npp/libnpp_norm.so

              # Unprivileged user (simulates PHP-FPM worker)
              adduser -D -s /bin/sh fpm

              # Helpers
              chmod +x /src/safexec/helpers/oneshot.pl
              openssl req -x509 -newkey rsa:2048 -nodes -days 1 \
                -subj "/CN=127.0.0.1" \
                -addext "subjectAltName=IP:127.0.0.1" \
                -keyout /tmp/key.pem -out /tmp/cert.pem >/dev/null 2>&1

              start_https() {
                socat -T1 OPENSSL-LISTEN:8080,reuseaddr,cert=/tmp/cert.pem,key=/tmp/key.pem,verify=0 \
                  SYSTEM:/src/safexec/helpers/oneshot.pl >/dev/null 2>&1 &
                echo $! > /tmp/req1.pid
                sleep 0.5
              }

              stop_https() {
                test -f /tmp/req1.pid && kill -9 "$(cat /tmp/req1.pid)" 2>/dev/null || true
                sleep 0.5
              }

              # Minimal upper => %2F%2A
              start_https
              su -s /bin/sh -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=upper SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 >/dev/null || true
              " fpm
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line1
              grep -q "GET /%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 " /tmp/line1 && echo "PASS" || { echo "FAIL"; exit 1; }
            '

      - name: E2E runtime smoke test (x86_64, glibc)
        run: |
          set -euo pipefail
          docker run --rm --privileged --cgroupns=host -v /sys/fs/cgroup:/sys/fs/cgroup:rw -v "$PWD":/src -w / debian:stable-slim bash -euxo pipefail -c '
              apt-get update
              apt-get install -y --no-install-recommends ca-certificates wget netcat-openbsd perl socat openssl

              # Install safexec (setuid-root) and the shim (root-owned, not writable)
              install -D /src/safexec/safexec-x86_64-linux-musl /usr/bin/safexec
              chown root:root /usr/bin/safexec
              chmod 4755 /usr/bin/safexec

              install -D /src/safexec/libnpp_norm-x86_64-glibc.so /usr/lib/npp/libnpp_norm.so
              chown root:root /usr/lib/npp/libnpp_norm.so
              chmod 0644 /usr/lib/npp/libnpp_norm.so

              # Unprivileged user (simulates PHP-FPM worker)
              useradd -m -s /bin/bash fpm

              # Helpers
              chmod +x /src/safexec/helpers/oneshot.pl
              openssl req -x509 -newkey rsa:2048 -nodes -days 1 \
                -subj "/CN=127.0.0.1" \
                -addext "subjectAltName=IP:127.0.0.1" \
                -keyout /tmp/key.pem -out /tmp/cert.pem >/dev/null 2>&1

              start_https() {
                socat -T1 OPENSSL-LISTEN:8080,reuseaddr,cert=/tmp/cert.pem,key=/tmp/key.pem,verify=0 \
                  SYSTEM:/src/safexec/helpers/oneshot.pl >/dev/null 2>&1 &
                echo $! > /tmp/req1.pid
                sleep 0.5
              }

              stop_https() {
                test -f /tmp/req1.pid && kill -9 "$(cat /tmp/req1.pid)" 2>/dev/null || true
                sleep 0.5
              }

              # 1) upper => %2F%2A
              start_https
              su - fpm -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=upper SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 >/dev/null || true
              "
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line1
              grep -q "GET /%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 " /tmp/line1 && echo "PASS" || { echo "FAIL"; exit 1; }

              # 2) lower => %2f%2a
              start_https
              su - fpm -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=lower SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 >/dev/null || true
              "
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line2
              grep -q "GET /%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 " /tmp/line2 && echo "PASS" || { echo "FAIL"; exit 1; }

              # 3) off => preserved mixed case
              start_https
              su - fpm -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=off SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 >/dev/null || true
              "
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line3
              grep -q "GET /%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 " /tmp/line3 && echo "PASS" || { echo "FAIL"; exit 1; }

              # 3.1) off => preserved mixed case
              start_https
              su - fpm -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=off SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 >/dev/null || true
              "
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line4
              grep -q "GET /%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 " /tmp/line4 && echo "PASS" || { echo "FAIL"; exit 1; }
            '

      - name: E2E runtime smoke test (aarch64, glibc)
        run: |
          set -euo pipefail
          docker run --rm --platform=linux/arm64 --privileged --cgroupns=host -v /sys/fs/cgroup:/sys/fs/cgroup:rw -v "$PWD":/src -w / debian:stable-slim bash -euxo pipefail -c '
              apt-get update
              apt-get install -y --no-install-recommends ca-certificates wget netcat-openbsd perl socat openssl

              # Install safexec (setuid-root) and the shim (root-owned, not writable)
              install -D /src/safexec/safexec-aarch64-linux-musl /usr/bin/safexec
              chown root:root /usr/bin/safexec
              chmod 4755 /usr/bin/safexec

              install -D /src/safexec/libnpp_norm-aarch64-glibc.so /usr/lib/npp/libnpp_norm.so
              chown root:root /usr/lib/npp/libnpp_norm.so
              chmod 0644 /usr/lib/npp/libnpp_norm.so

              # Unprivileged user (simulates PHP-FPM worker)
              useradd -m -s /bin/bash fpm

              # Helpers
              chmod +x /src/safexec/helpers/oneshot.pl
              openssl req -x509 -newkey rsa:2048 -nodes -days 1 \
                -subj "/CN=127.0.0.1" \
                -addext "subjectAltName=IP:127.0.0.1" \
                -keyout /tmp/key.pem -out /tmp/cert.pem >/dev/null 2>&1

              start_https() {
                socat -T1 OPENSSL-LISTEN:8080,reuseaddr,cert=/tmp/cert.pem,key=/tmp/key.pem,verify=0 \
                  SYSTEM:/src/safexec/helpers/oneshot.pl >/dev/null 2>&1 &
                echo $! > /tmp/req1.pid
                sleep 0.5
              }

              stop_https() {
                test -f /tmp/req1.pid && kill -9 "$(cat /tmp/req1.pid)" 2>/dev/null || true
                sleep 0.5
              }

              # Minimal upper => %2F%2A
              start_https
              su - fpm -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=upper SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 >/dev/null || true
              "
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line1
              grep -q "GET /%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 " /tmp/line1 && echo "PASS" || { echo "FAIL"; exit 1; }
            '

      # STAGE INTO BIN
      - name: Stage build artifacts
        run: |
          set -euo pipefail
          mv safexec/safexec-*-linux-musl safexec/bin/
          mv safexec/libnpp_norm-*.so safexec/bin/

      # Make checksums (per-file + combined)
      - name: Generate checksums
        run: |
          set -euo pipefail
          cd safexec/bin
          # safexec (static)
          for f in safexec-*-linux-musl; do
            test -x "$f"
            sha256sum "$f" > "$f.sha256"
          done
          # shim (shared)
          for f in libnpp_norm-*.so; do
            test -f "$f"
            sha256sum "$f" > "$f.sha256"
          done
          sha256sum safexec-*-linux-musl libnpp_norm-*.so | sort > SHA256SUMS

      # Create signed SLSA provenance linked to the exact digests of the files above
      - name: Generate SLSA provenance for build artifacts
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: |
            safexec/bin/safexec-*-linux-musl
            safexec/bin/libnpp_norm-*.so
            safexec/bin/SHA256SUMS

      - name: Upload safexec build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: safexec-binaries
          path: |
            safexec/bin/safexec-*-linux-musl
            safexec/bin/libnpp_norm-*.so
            safexec/bin/*.sha256
            safexec/bin/SHA256SUMS

      - name: Fix workspace perms & exclude build dirs
        run: |
          set -euo pipefail
          # Hand all files back to the runner (some were created by root in containers)
          sudo chown -R "$(id -u)":"$(id -g)" .

          # Remove container-created packaging worktrees if present
          sudo rm -rf pkg-safexec-*-single || true

          # Keep build outputs out of Git so they don't get stashed/committed
          mkdir -p .git/info
          for p in safexec/bin/ safexec/deb/ pkg-safexec-*/; do
            grep -qxF "$p" .git/info/exclude 2>/dev/null || echo "$p" >> .git/info/exclude
          done

      - name: Final clean of packaging worktrees (authoritative)
        run: |
          set -euo pipefail
          # Ensure no root-owned worktrees remain before git checkout
          sudo chown -R "$(id -u)":"$(id -g)" pkg-safexec-*-single 2>/dev/null || true
          sudo rm -rf pkg-safexec-*-single || true

      # Commit back to repo
      - name: Commit binaries & checksums back to repo
        if: github.ref_type == 'branch'
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          set -euo pipefail
          BRANCH="${GITHUB_REF#refs/heads/}"

          # Ensure executable bit for produced binaries (harmless if none)
          chmod 755 safexec/bin/safexec-*-linux-musl || true

          # Git identity
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Make sure we're up-to-date with the remote branch
          git fetch --prune origin
          git stash push -u -m "ci-artifacts" || true
          git checkout -B "${BRANCH}" "origin/${BRANCH}"
          git stash pop || true

          # Stage artifacts
          git add safexec/bin/safexec-*-linux-musl safexec/bin/libnpp_norm-*.so safexec/bin/*.sha256 safexec/bin/SHA256SUMS || true

          # Nothing to do?
          if git diff --cached --quiet; then
            echo "No artifact changes to commit."
            exit 0
          fi

          git commit -m "ci: build safexec + libnpp_norm (glibc/musl)"

          # Rebase onto latest remote and push; retry once to beat races
          for attempt in 1 2; do
            git pull --rebase --autostash origin "${BRANCH}" && \
            git push origin "HEAD:${BRANCH}" && exit 0
            echo "Push attempt ${attempt} failed; refetching and retrying..."
            sleep 2
            git fetch --prune origin
          done

          echo "Giving up after 2 attempts."
          exit 1

  build-and-attest-debs:
    name: Build & attest Debian packages
    needs: safexec-build-test-attest
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      attestations: write
      actions: read
    env:
      DEB_REV: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download safexec build artifacts
        uses: actions/download-artifact@v4
        with:
          name: safexec-binaries
          path: safexec/bin

      - name: Ensure exec bit on safexec
        run: chmod 755 safexec/bin/safexec-*-linux-musl || true

      - name: Ensure Debian tooling
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            devscripts debhelper dpkg-dev lintian build-essential fakeroot sudo debhelper-compat

      - name: Resolve version from safexec -v
        id: ver
        env:
          DEB_REV: ${{ env.DEB_REV }}
        shell: bash
        run: |
          set -euo pipefail

          BIN="safexec/bin/safexec-x86_64-linux-musl"
          [[ -x "$BIN" ]] || BIN="safexec/bin/safexec-aarch64-linux-musl"
          [[ -x "$BIN" ]] || { echo "safexec binary not found in safexec/bin"; exit 1; }

          # Only take the first line
          FIRST_LINE="$("$BIN" -v | head -n1)"
          BASE_VER="$(printf '%s\n' "$FIRST_LINE" | awk '{print $2}')"

          # (Optional) sanity-check it looks like N.N or N.N.N
          if ! printf '%s' "$BASE_VER" | grep -Eq '^[0-9]+(\.[0-9]+){1,2}$'; then
            echo "Could not parse version from: $FIRST_LINE"
            exit 1
          fi

          echo "Detected safexec version: $BASE_VER (DEB_REV=${DEB_REV:-1})"

          {
            printf 'base=%s\n' "$BASE_VER"
            printf 'deb=%s-%s\n' "$BASE_VER" "${DEB_REV:-1}"
          } >> "$GITHUB_OUTPUT"

      - name: Make deb.sh executable
        run: chmod +x safexec/helpers/deb.sh

      - name: Build .deb (amd64)
        run: |
          set -euo pipefail
          docker run --rm -v "$PWD":/src -w /src debian:bullseye-slim bash -euxo pipefail -c '
            apt-get update
            apt-get install -y --no-install-recommends devscripts debhelper dpkg-dev lintian build-essential sudo fakeroot
            chmod +x safexec/helpers/deb.sh
            bash safexec/helpers/deb.sh --arch amd64 --version '"${{ steps.ver.outputs.deb }}"'
          '

      - name: Enable binfmt for arm64
        run: |
          set -euo pipefail
          docker run --privileged --rm tonistiigi/binfmt --install arm64

      - name: Build .deb (arm64)
        run: |
          set -euo pipefail
          docker run --rm --platform=linux/arm64 -v "$PWD":/src -w /src debian:bullseye-slim bash -euxo pipefail -c '
            apt-get update
            apt-get install -y --no-install-recommends devscripts debhelper dpkg-dev lintian build-essential sudo fakeroot
            chmod +x safexec/helpers/deb.sh
            bash safexec/helpers/deb.sh --arch arm64 --version '"${{ steps.ver.outputs.deb }}"'
          '

      - name: Fix ownership of deb build outputs
        run: |
          set -euo pipefail
          sudo chown -R "$(id -u)":"$(id -g)" .

      - name: Collect .debs into safexec/deb/
        run: |
          set -euo pipefail
          mkdir -p safexec/deb
          mv "safexec_${{ steps.ver.outputs.deb }}_amd64.deb" safexec/deb/ 2>/dev/null || true
          mv "safexec_${{ steps.ver.outputs.deb }}_arm64.deb" safexec/deb/ 2>/dev/null || true
          cd safexec/deb
          ls -1 *.deb
          sha256sum *.deb | sort > SHA256SUMS

      - name: Clean packaging worktrees
        run: |
          set -euo pipefail
          sudo rm -rf pkg-safexec-*-single || true

      - name: Generate SLSA provenance (deb packages)
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: |
            safexec/deb/*.deb
            safexec/deb/SHA256SUMS

      - name: Upload debs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: safexec-debs-${{ steps.ver.outputs.deb }}
          path: |
            safexec/deb/*.deb
            safexec/deb/SHA256SUMS
          if-no-files-found: error

      - name: Fix workspace perms & exclude build dirs
        run: |
          set -euo pipefail
          # Hand all files back to the runner (some were created by root in containers)
          sudo chown -R "$(id -u)":"$(id -g)" .

          # Remove container-created packaging worktrees if present
          sudo rm -rf pkg-safexec-*-single || true

          # Keep build outputs out of Git so they don't get stashed/committed
          mkdir -p .git/info
          for p in safexec/bin/ safexec/deb/ pkg-safexec-*/; do
            grep -qxF "$p" .git/info/exclude 2>/dev/null || echo "$p" >> .git/info/exclude
          done

      - name: Final clean of packaging worktrees (authoritative)
        run: |
          set -euo pipefail
          # Ensure no root-owned worktrees remain before git checkout
          sudo chown -R "$(id -u)":"$(id -g)" pkg-safexec-*-single 2>/dev/null || true
          sudo rm -rf pkg-safexec-*-single || true

      - name: Commit .deb packages back to repo
        if: github.ref_type == 'branch'
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          set -euo pipefail
          BRANCH="${GITHUB_REF#refs/heads/}"

          # Ensure we track the remote branch and have its latest commits
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          mkdir -p .git/info
          printf 'safexec/bin/\n' >> .git/info/exclude

          git fetch --prune origin
          git stash push -u -m "ci-artifacts" || true
          git checkout -B "${BRANCH}" "origin/${BRANCH}"
          git stash pop || true

          git add safexec/deb/*.deb safexec/deb/SHA256SUMS || true
          if git diff --cached --quiet; then
            echo "No .deb changes to commit."
            exit 0
          fi

          git commit -m "ci: add Debian packages for ${{ steps.ver.outputs.deb }}"

          # Integrate remote updates, then push. Retry once to beat races.
          for attempt in 1 2; do
            git pull --rebase --autostash origin "${BRANCH}" && \
            git push origin "HEAD:${BRANCH}" && exit 0
            echo "Push attempt ${attempt} failed; refetching and retrying..."
            sleep 2
            git fetch --prune origin
          done

          echo "Giving up after 2 attempts."
          exit 1
