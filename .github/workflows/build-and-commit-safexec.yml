name: safexec CI

on:
  push:
    paths:
      - "safexec/safexec.c"
      - "safexec/libnpp_norm.c" 
      - ".github/workflows/build-and-commit-safexec.yml"
  workflow_dispatch: {}

concurrency:
  group: build-safexec-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      attestations: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Ensure host tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y file coreutils binutils
          mkdir -p safexec/bin

      ############################################
      # build- safexec (musl) — x64 + arm64
      ############################################

      # Build static x86_64 (musl) with Alpine
      - name: Build x86_64 static (musl)
        run: |
          set -euo pipefail
          docker run --rm -v "$PWD":/src -w /src/safexec alpine:3.21 sh -euxc '
            apk add --no-cache build-base musl-dev linux-headers
            gcc -static -O2 -pipe -fPIE -pie -fstack-protector-strong -D_FORTIFY_SOURCE=2 \
                -Wl,-z,relro,-z,now safexec.c -o safexec-x86_64-linux-musl
            strip safexec-x86_64-linux-musl
          '

      # Build static aarch64 (musl) with dockcross
      - name: Build aarch64 static (musl)
        run: |
          set -euo pipefail
          # Generate dockcross wrapper for the musl ARM64 toolchain
          docker run --rm dockcross/linux-arm64-musl > ./dockcross
          chmod +x ./dockcross

          # Compile inside the dockcross environment; output to safexec/
          ./dockcross bash -euxc '
            if command -v apt-get >/dev/null 2>&1; then
              apt-get update
              DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends linux-libc-dev
            fi
            aarch64-linux-musl-gcc -static -O2 -pipe -fPIE -pie -fstack-protector-strong -D_FORTIFY_SOURCE=2 \
                -Wl,-z,relro,-z,now safexec/safexec.c -o safexec/safexec-aarch64-linux-musl
            aarch64-linux-musl-strip safexec/safexec-aarch64-linux-musl
          '
      ############################################################
      # build- libnpp_norm.so (LD_PRELOAD shim) — glibc + musl for x64 + arm64
      ############################################################

      # x86_64 (glibc) — build in Debian
      - name: Build libnpp_norm (x86_64, glibc)
        run: |
          set -euo pipefail
          docker run --rm -v "$PWD":/src -w /src debian:stable-slim bash -euxo pipefail -c '
            apt-get update
            apt-get install -y --no-install-recommends build-essential binutils
            gcc -O2 -pipe -fPIC -Wall -Wextra -Wformat=2 -DWGET_FASTPATH \
                -shared safexec/libnpp_norm.c -o safexec/libnpp_norm-x86_64-glibc.so \
                -Wl,-z,relro,-z,now -Wl,-z,noexecstack -ldl -pthread
            strip --strip-unneeded safexec/libnpp_norm-x86_64-glibc.so
          '

      # x86_64 (musl) — build in Alpine
      - name: Build libnpp_norm (x86_64, musl)
        run: |
          set -euo pipefail
          docker run --rm -v "$PWD":/src -w /src/safexec alpine:3.21 sh -euxc '
            apk add --no-cache build-base musl-dev
            gcc -O2 -pipe -fPIC -Wall -Wextra -Wformat=2 -DWGET_FASTPATH \
                -shared libnpp_norm.c -o libnpp_norm-x86_64-musl.so \
                -Wl,-z,relro,-z,now -Wl,-z,noexecstack -ldl -pthread
            strip --strip-unneeded libnpp_norm-x86_64-musl.so
          '

      # aarch64 (glibc) — build in dockcross glibc toolchain
      - name: Build libnpp_norm (aarch64, glibc)
        run: |
          set -euo pipefail
          docker run --rm dockcross/linux-arm64 > ./dockcross.arm64
          chmod +x ./dockcross.arm64
          ./dockcross.arm64 bash -euxc '
            aarch64-unknown-linux-gnu-gcc -O2 -pipe -fPIC -Wall -Wextra -Wformat=2 -DWGET_FASTPATH \
                -shared safexec/libnpp_norm.c -o safexec/libnpp_norm-aarch64-glibc.so \
                -Wl,-z,relro,-z,now -Wl,-z,noexecstack -ldl -pthread
            aarch64-unknown-linux-gnu-strip --strip-unneeded safexec/libnpp_norm-aarch64-glibc.so
          '

      # aarch64 (musl) — build in dockcross musl toolchain
      - name: Build libnpp_norm (aarch64, musl)
        run: |
          set -euo pipefail
          docker run --rm dockcross/linux-arm64-musl > ./dockcross.musl.arm64
          chmod +x ./dockcross.musl.arm64
          ./dockcross.musl.arm64 bash -euxc '
            aarch64-linux-musl-gcc -O2 -pipe -fPIC -Wall -Wextra -Wformat=2 -DWGET_FASTPATH \
                -shared safexec/libnpp_norm.c -o safexec/libnpp_norm-aarch64-musl.so \
                -Wl,-z,relro,-z,now -Wl,-z,noexecstack -ldl -pthread
            aarch64-linux-musl-strip --strip-unneeded safexec/libnpp_norm-aarch64-musl.so
          '

      # Fix ownership of artifacts created by containers
      - name: Fix artifact ownership
        run: |
          set -euo pipefail
          sudo chown "$(id -u)":"$(id -g)" safexec/safexec-*-linux-musl safexec/libnpp_norm-*.so
    
      # Sanity check: confirm the safexec binaries are static before checksums
      - name: Verify safexec binaries are static
        run: |
          set -euo pipefail
          ls -l safexec/safexec-*-linux-musl
          file safexec/safexec-*-linux-musl
          for f in safexec/safexec-*-linux-musl; do
            # Fail if an INTERP segment exists (means dynamically linked)
            ! readelf -lW "$f" | grep -q INTERP
          done

      # Enable qemu/binfmt so we can run arm64 containers on x86_64 runner
      - name: Enable binfmt for arm64
        run: |
          set -euo pipefail
          docker run --privileged --rm tonistiigi/binfmt --install arm64

      ############################################
      # E2E smoke tests hybrid safexec + shim  (musl:glibc | x86_64:aarch64
      ############################################

      - name: E2E runtime smoke test(x86_64, musl)
        run: |
          set -euo pipefail
          docker run --rm --privileged --cgroupns=host -v /sys/fs/cgroup:/sys/fs/cgroup:rw -v "$PWD":/src -w / alpine:3.21 sh -euxc '
              apk add --no-cache coreutils wget busybox-extras perl socat openssl

              # Install safexec (setuid-root) and the shim (root-owned, not writable)
              install -D /src/safexec/safexec-x86_64-linux-musl /usr/bin/safexec
              chown root:root /usr/bin/safexec
              chmod 4755 /usr/bin/safexec

              install -D /src/safexec/libnpp_norm-x86_64-musl.so /usr/lib/npp/libnpp_norm.so
              chown root:root /usr/lib/npp/libnpp_norm.so
              chmod 0644 /usr/lib/npp/libnpp_norm.so

              # Unprivileged user (simulates PHP-FPM worker)
              adduser -D -s /bin/sh fpm

              # Helpers
              chmod +x /src/safexec/helpers/oneshot.pl
              openssl req -x509 -newkey rsa:2048 -nodes -days 1 \
                -subj "/CN=127.0.0.1" \
                -addext "subjectAltName=IP:127.0.0.1" \
                -keyout /tmp/key.pem -out /tmp/cert.pem >/dev/null 2>&1

              start_https() {
                socat -T1 OPENSSL-LISTEN:8080,reuseaddr,cert=/tmp/cert.pem,key=/tmp/key.pem,verify=0 \
                  SYSTEM:/src/safexec/helpers/oneshot.pl >/dev/null 2>&1 &
                echo $! > /tmp/req1.pid
                sleep 0.5
              }

              stop_https() {
                test -f /tmp/req1.pid && kill -9 "$(cat /tmp/req1.pid)" 2>/dev/null || true
                sleep 0.5
              }

              # 1) upper => %2F%2A
              start_https
              su -s /bin/sh -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=upper SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 >/dev/null || true
              " fpm
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line1
              grep -q "GET /%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 " /tmp/line1 && echo "PASS" || { echo "FAIL"; exit 1; }

              # 2) lower => %2f%2a
              start_https
              su -s /bin/sh -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=lower SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 >/dev/null || true
              " fpm
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line2
              grep -q "GET /%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 " /tmp/line2 && echo "PASS" || { echo "FAIL"; exit 1; }

              # 3) off => preserved mixed case
              start_https
              su -s /bin/sh -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=off SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 >/dev/null || true
              " fpm
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line3
              grep -q "GET /%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 " /tmp/line3 && echo "PASS" || { echo "FAIL"; exit 1; }

              # 3.1) off => preserved mixed case
              start_https
              su -s /bin/sh -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=off SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 >/dev/null || true
              " fpm
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line4
              grep -q "GET /%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 " /tmp/line4 && echo "PASS" || { echo "FAIL"; exit 1; }
            '

      - name: E2E runtime smoke test (aarch64, musl)
        run: |
          set -euo pipefail
          docker run --rm --platform=linux/arm64 --privileged --cgroupns=host -v /sys/fs/cgroup:/sys/fs/cgroup:rw -v "$PWD":/src -w / alpine:3.21 sh -euxc '
              apk add --no-cache coreutils wget busybox-extras perl socat openssl

              # Install safexec (setuid-root) and the shim (root-owned, not writable)
              install -D /src/safexec/safexec-aarch64-linux-musl /usr/bin/safexec
              chown root:root /usr/bin/safexec
              chmod 4755 /usr/bin/safexec

              install -D /src/safexec/libnpp_norm-aarch64-musl.so /usr/lib/npp/libnpp_norm.so
              chown root:root /usr/lib/npp/libnpp_norm.so
              chmod 0644 /usr/lib/npp/libnpp_norm.so

              # Unprivileged user (simulates PHP-FPM worker)
              adduser -D -s /bin/sh fpm

              # Helpers
              chmod +x /src/safexec/helpers/oneshot.pl
              openssl req -x509 -newkey rsa:2048 -nodes -days 1 \
                -subj "/CN=127.0.0.1" \
                -addext "subjectAltName=IP:127.0.0.1" \
                -keyout /tmp/key.pem -out /tmp/cert.pem >/dev/null 2>&1

              start_https() {
                socat -T1 OPENSSL-LISTEN:8080,reuseaddr,cert=/tmp/cert.pem,key=/tmp/key.pem,verify=0 \
                  SYSTEM:/src/safexec/helpers/oneshot.pl >/dev/null 2>&1 &
                echo $! > /tmp/req1.pid
                sleep 0.5
              }

              stop_https() {
                test -f /tmp/req1.pid && kill -9 "$(cat /tmp/req1.pid)" 2>/dev/null || true
                sleep 0.5
              }

              # Minimal upper => %2F%2A
              start_https
              su -s /bin/sh -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=upper SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 >/dev/null || true
              " fpm
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line1
              grep -q "GET /%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 " /tmp/line1 && echo "PASS" || { echo "FAIL"; exit 1; }
            '

      - name: E2E runtime smoke test (x86_64, glibc)
        run: |
          set -euo pipefail
          docker run --rm --privileged --cgroupns=host -v /sys/fs/cgroup:/sys/fs/cgroup:rw -v "$PWD":/src -w / debian:stable-slim bash -euxo pipefail -c '
              apt-get update
              apt-get install -y --no-install-recommends ca-certificates wget netcat-openbsd perl socat openssl

              # Install safexec (setuid-root) and the shim (root-owned, not writable)
              install -D /src/safexec/safexec-x86_64-linux-musl /usr/bin/safexec
              chown root:root /usr/bin/safexec
              chmod 4755 /usr/bin/safexec

              install -D /src/safexec/libnpp_norm-x86_64-glibc.so /usr/lib/npp/libnpp_norm.so
              chown root:root /usr/lib/npp/libnpp_norm.so
              chmod 0644 /usr/lib/npp/libnpp_norm.so

              # Unprivileged user (simulates PHP-FPM worker)
              useradd -m -s /bin/bash fpm

              # Helpers
              chmod +x /src/safexec/helpers/oneshot.pl
              openssl req -x509 -newkey rsa:2048 -nodes -days 1 \
                -subj "/CN=127.0.0.1" \
                -addext "subjectAltName=IP:127.0.0.1" \
                -keyout /tmp/key.pem -out /tmp/cert.pem >/dev/null 2>&1

              start_https() {
                socat -T1 OPENSSL-LISTEN:8080,reuseaddr,cert=/tmp/cert.pem,key=/tmp/key.pem,verify=0 \
                  SYSTEM:/src/safexec/helpers/oneshot.pl >/dev/null 2>&1 &
                echo $! > /tmp/req1.pid
                sleep 0.5
              }

              stop_https() {
                test -f /tmp/req1.pid && kill -9 "$(cat /tmp/req1.pid)" 2>/dev/null || true
                sleep 0.5
              }

              # 1) upper => %2F%2A
              start_https
              su - fpm -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=upper SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 >/dev/null || true
              "
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line1
              grep -q "GET /%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 " /tmp/line1 && echo "PASS" || { echo "FAIL"; exit 1; }

              # 2) lower => %2f%2a
              start_https
              su - fpm -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=lower SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 >/dev/null || true
              "
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line2
              grep -q "GET /%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 " /tmp/line2 && echo "PASS" || { echo "FAIL"; exit 1; }

              # 3) off => preserved mixed case
              start_https
              su - fpm -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=off SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 >/dev/null || true
              "
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line3
              grep -q "GET /%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 " /tmp/line3 && echo "PASS" || { echo "FAIL"; exit 1; }

              # 3.1) off => preserved mixed case
              start_https
              su - fpm -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=off SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 >/dev/null || true
              "
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line4
              grep -q "GET /%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 " /tmp/line4 && echo "PASS" || { echo "FAIL"; exit 1; }
            '

      - name: E2E runtime smoke test (aarch64, glibc)
        run: |
          set -euo pipefail
          docker run --rm --platform=linux/arm64 --privileged --cgroupns=host -v /sys/fs/cgroup:/sys/fs/cgroup:rw -v "$PWD":/src -w / debian:stable-slim bash -euxo pipefail -c '
              apt-get update
              apt-get install -y --no-install-recommends ca-certificates wget netcat-openbsd perl socat openssl

              # Install safexec (setuid-root) and the shim (root-owned, not writable)
              install -D /src/safexec/safexec-aarch64-linux-musl /usr/bin/safexec
              chown root:root /usr/bin/safexec
              chmod 4755 /usr/bin/safexec

              install -D /src/safexec/libnpp_norm-aarch64-glibc.so /usr/lib/npp/libnpp_norm.so
              chown root:root /usr/lib/npp/libnpp_norm.so
              chmod 0644 /usr/lib/npp/libnpp_norm.so

              # Unprivileged user (simulates PHP-FPM worker)
              useradd -m -s /bin/bash fpm

              # Helpers
              chmod +x /src/safexec/helpers/oneshot.pl
              openssl req -x509 -newkey rsa:2048 -nodes -days 1 \
                -subj "/CN=127.0.0.1" \
                -addext "subjectAltName=IP:127.0.0.1" \
                -keyout /tmp/key.pem -out /tmp/cert.pem >/dev/null 2>&1

              start_https() {
                socat -T1 OPENSSL-LISTEN:8080,reuseaddr,cert=/tmp/cert.pem,key=/tmp/key.pem,verify=0 \
                  SYSTEM:/src/safexec/helpers/oneshot.pl >/dev/null 2>&1 &
                echo $! > /tmp/req1.pid
                sleep 0.5
              }

              stop_https() {
                test -f /tmp/req1.pid && kill -9 "$(cat /tmp/req1.pid)" 2>/dev/null || true
                sleep 0.5
              }

              # Minimal upper => %2F%2A
              start_https
              su - fpm -c "
                export SAFEXEC_PCTNORM=1 SAFEXEC_PCTNORM_CASE=upper SAFEXEC_DETACH=auto;
                /usr/bin/safexec wget --ca-certificate=/tmp/cert.pem -qO- https://127.0.0.1:8080/%e6%b0%b4%e6%bb%b4%e8%bd%ae%e9%94%bb%e7%a2%b3%e5%8d%95%e6%91%87 >/dev/null || true
              "
              stop_https
              head -n1 /tmp/req1 | tee /tmp/line1
              grep -q "GET /%E6%B0%B4%E6%BB%B4%E8%BD%AE%E9%94%BB%E7%A2%B3%E5%8D%95%E6%91%87 " /tmp/line1 && echo "PASS" || { echo "FAIL"; exit 1; }
            '

      # STAGE INTO BIN
      - name: Stage artifacts into bin/
        run: |
          set -euo pipefail
          mv safexec/safexec-*-linux-musl safexec/bin/
          mv safexec/libnpp_norm-*.so safexec/bin/

      # Make checksums (per-file + combined)
      - name: Generate checksums
        run: |
          set -euo pipefail
          cd safexec/bin
          # safexec (static)
          for f in safexec-*-linux-musl; do
            test -x "$f"
            sha256sum "$f" > "$f.sha256"
          done
          # shim (shared)
          for f in libnpp_norm-*.so; do
            test -f "$f"
            sha256sum "$f" > "$f.sha256"
          done
          sha256sum safexec-*-linux-musl libnpp_norm-*.so | sort > SHA256SUMS

      # Create signed SLSA provenance linked to the exact digests of the files above
      - name: Generate SLSA provenance for build artifacts
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: |
            safexec/bin/safexec-*-linux-musl
            safexec/bin/libnpp_norm-*.so
            safexec/bin/SHA256SUMS

      # Commit back to repo
      - name: Commit binaries & checksums back to repo
        if: github.ref_type == 'branch'
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          set -euo pipefail

          # Ensure executable bit for produced binaries
          chmod 755 safexec/bin/safexec-*-linux-musl || true

          # Configure Git identity
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Add only the binaries and checksum files
          git add safexec/bin/safexec-*-linux-musl safexec/bin/libnpp_norm-*.so safexec/bin/*.sha256 safexec/bin/SHA256SUMS || true

          # Commit only if there are staged changes
          if git diff --cached --quiet; then
            echo "No artifact changes to commit."
            exit 0
          fi

          git commit -m "ci: build safexec + libnpp_norm (glibc/musl)"
          git push origin HEAD:${GITHUB_REF#refs/heads/}
