name: safexec CI

on:
  push:
    paths:
      - "safexec/safexec.c"
      - ".github/workflows/build-and-commit-safexec.yml"
  workflow_dispatch: {}

concurrency:
  group: build-safexec-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      attestations: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Ensure host tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y file coreutils binutils

      # Build static x86_64 (musl) with Alpine's GCC
      - name: Build x86_64 static (musl)
        run: |
          set -euo pipefail
          docker run --rm -v "$PWD":/src -w /src/safexec alpine:3.21 sh -euxc '
            apk add --no-cache build-base musl-dev linux-headers
            gcc -static -O2 -pipe -fPIE -pie -fstack-protector-strong -D_FORTIFY_SOURCE=2 \
                -Wl,-z,relro,-z,now safexec.c -o safexec-x86_64-linux-musl
            strip safexec-x86_64-linux-musl
          '

      # Build static aarch64 (musl) with dockcross
      - name: Build aarch64 static (musl)
        run: |
          set -euo pipefail
          # Generate dockcross wrapper for the musl ARM64 toolchain
          docker run --rm dockcross/linux-arm64-musl > ./dockcross
          chmod +x ./dockcross

          # Compile inside the dockcross environment; output to safexec/
          ./dockcross bash -euxc '
            if command -v apt-get >/dev/null 2>&1; then
              apt-get update
              DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends linux-libc-dev
            fi
            aarch64-linux-musl-gcc -static -O2 -pipe -fPIE -pie -fstack-protector-strong -D_FORTIFY_SOURCE=2 \
                -Wl,-z,relro,-z,now safexec/safexec.c -o safexec/safexec-aarch64-linux-musl
            aarch64-linux-musl-strip safexec/safexec-aarch64-linux-musl
          '

      # Fix ownership of artifacts created by containers
      - name: Fix artifact ownership
        run: |
          set -euo pipefail
          sudo chown "$(id -u)":"$(id -g)" safexec/safexec-*-linux-musl
    
      # Sanity check: confirm the binaries are static BEFORE checksums
      - name: Verify binaries are static
        run: |
          set -euo pipefail
          ls -l safexec/safexec-*-linux-musl
          file safexec/safexec-*-linux-musl
          for f in safexec/safexec-*-linux-musl; do
            # Fail if an INTERP segment exists (means dynamically linked)
            ! readelf -lW "$f" | grep -q INTERP
          done

      # Enable qemu/binfmt so we can run arm64 containers on x86_64 runner
      - name: Enable binfmt for arm64
        run: |
          set -euo pipefail
          docker run --privileged --rm tonistiigi/binfmt --install arm64

      # Runtime smoke test (x86_64, minimal)
      - name: Runtime smoke test (x86_64)
        run: |
          set -euo pipefail
          docker run --rm --privileged --cgroupns=host -v /sys/fs/cgroup:/sys/fs/cgroup:rw -v "$PWD":/src -w / alpine:3.21 sh -euxc '
            apk add --no-cache coreutils wget
            cp /src/safexec/safexec-x86_64-linux-musl /usr/local/bin/safexec
            chown root:root /usr/local/bin/safexec
            chmod 4755 /usr/local/bin/safexec
            adduser -D -s /bin/sh fpm
            su -s /bin/sh -c "/usr/local/bin/safexec --help" fpm
            su -s /bin/sh -c "/usr/local/bin/safexec wget --version >/dev/null" fpm
          '

      # Runtime smoke test (aarch64, minimal; runs via qemu)
      - name: Runtime smoke test (aarch64)
        run: |
          set -euo pipefail
          docker run --rm --platform=linux/arm64 -v "$PWD":/src -w / alpine:3.21 sh -euxc '
            apk add --no-cache coreutils wget
            cp /src/safexec/safexec-aarch64-linux-musl /usr/local/bin/safexec
            chown root:root /usr/local/bin/safexec
            chmod 4755 /usr/local/bin/safexec
            adduser -D -s /bin/sh fpm
            su -s /bin/sh -c "/usr/local/bin/safexec --help >/dev/null" fpm
            su -s /bin/sh -c "/usr/local/bin/safexec wget --version >/dev/null" fpm
          '

      # Make checksums (per-file + combined)
      - name: Generate checksums
        run: |
          set -euo pipefail
          cd safexec
          for f in safexec-*-linux-musl; do
            test -x "$f"
            sha256sum "$f" > "$f.sha256"
          done
          sha256sum safexec-*-linux-musl | sort > SHA256SUMS

      # Create signed SLSA provenance linked to the exact digests of the files above
      - name: Generate SLSA provenance for build artifacts
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: |
            safexec/safexec-*-linux-musl
            safexec/SHA256SUMS

      # Commit back to repo
      - name: Commit binaries & checksums back to repo
        if: github.ref_type == 'branch'
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          set -euo pipefail

          # Ensure executable bit for produced binaries
          chmod 755 safexec/safexec-*-linux-musl || true

          # Configure Git identity
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Add only the binaries and checksum files
          git add safexec/safexec-*-linux-musl safexec/*.sha256 safexec/SHA256SUMS || true

          # Commit only if there are staged changes
          if git diff --cached --quiet; then
            echo "No binary changes to commit."
            exit 0
          fi

          git commit -m "ci: build safexec (musl) binaries [skip ci]"
          git push origin HEAD:${GITHUB_REF#refs/heads/}
