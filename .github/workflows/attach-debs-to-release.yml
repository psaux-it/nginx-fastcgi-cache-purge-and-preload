name: Attach .deb assets to release

on:
  release:
    types: [published, edited, prereleased]
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag to attach assets to (e.g. v2.1.3)"
        required: false
        default: ""

permissions:
  contents: write

concurrency:
  group: attach-debs-${{ github.event.release.tag_name || inputs.tag || 'manual' }}
  cancel-in-progress: false

jobs:
  attach-debs:
    runs-on: ubuntu-latest
    steps:
      - name: Determine target tag
        id: tag
        shell: bash
        env:
          INPUT_TAG: ${{ inputs.tag }}
        run: |
          set -euo pipefail
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            TAG="${{ github.event.release.tag_name }}"
          elif [[ -n "${INPUT_TAG}" ]]; then
            TAG="${INPUT_TAG}"
          else
            echo "No tag provided on manual run; trying latest releaseâ€¦"
            # requires gh (preinstalled on ubuntu-latest)
            echo "${{ github.token }}" | gh auth login --with-token
            TAG="$(gh release view --json tagName -q .tagName)"
          fi
          [[ -n "$TAG" ]] || { echo "Could not resolve a tag."; exit 1; }
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "ver=${TAG#v}" >> "$GITHUB_OUTPUT"
          echo "Will attach to release: $TAG"

      # Checkout the DEFAULT BRANCH so we can see safexec/deb committed there
      - name: Checkout default branch
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.repository.default_branch }}

      # Get debs
      - name: Collect .deb files to upload
        id: files
        shell: bash
        run: |
          set -euo pipefail
          VER='${{ steps.tag.outputs.ver }}'

          gather_latest() {
            local pattern="$1"
            local matches=()
            # expand the glob safely; if no match, array stays empty
            shopt -s nullglob
            matches=( $pattern )
            shopt -u nullglob

            ((${#matches[@]})) || { echo ""; return; }
            printf '%s\n' "${matches[@]}" | sort -V | tail -n1
          }

          AMD="$(gather_latest "safexec/deb/safexec_${VER}-*_amd64.deb")"
          ARM="$(gather_latest "safexec/deb/safexec_${VER}-*_arm64.deb")"

          # fallback to newest per-arch if tag-specific not found
          [[ -n "$AMD" ]] || AMD="$(gather_latest "safexec/deb/safexec_*_amd64.deb")"
          [[ -n "$ARM" ]] || ARM="$(gather_latest "safexec/deb/safexec_*_arm64.deb")"

          FILES=()
          [[ -n "${AMD:-}" && -f "$AMD" ]] && FILES+=("$AMD")
          [[ -n "${ARM:-}" && -f "$ARM" ]] && FILES+=("$ARM")
          [[ -f safexec/deb/SHA256SUMS ]] && FILES+=("safexec/deb/SHA256SUMS")

          if ((${#FILES[@]}==0)); then
            echo "No matching .deb files under safexec/deb/"; exit 1
          fi

          printf 'files<<__EOL__\n' >> "$GITHUB_OUTPUT"
          printf '%s\n' "${FILES[@]}" >> "$GITHUB_OUTPUT"
          printf '__EOL__\n' >> "$GITHUB_OUTPUT"

          echo "Resolved files:"
          printf '  %s\n' "${FILES[@]}"

      - name: Upload assets (overwrite if already present)
        env:
          GH_TOKEN: ${{ github.token }}   # provided by Actions; no manual login needed
          TAG_NAME: ${{ steps.tag.outputs.tag }}
        shell: bash
        run: |
          set -euo pipefail

          # sanity: release exists
          gh release view "${TAG_NAME}" --repo "${GITHUB_REPOSITORY}" >/dev/null

          # read multiline output variable into an array
          mapfile -t FILES < <(printf '%s\n' "${{ steps.files.outputs.files }}")

          echo "Uploading to ${TAG_NAME} on ${GITHUB_REPOSITORY}:"
          printf '  %s\n' "${FILES[@]}"

          # upload and overwrite if already present
          gh release upload "${TAG_NAME}" --repo "${GITHUB_REPOSITORY}" --clobber "${FILES[@]}"
