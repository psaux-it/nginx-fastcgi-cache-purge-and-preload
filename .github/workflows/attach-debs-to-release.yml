name: Attach .deb assets to release

on:
  release:
    types: [published, edited, prereleased]
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag to attach assets to (e.g. v2.1.3)"
        required: false
        default: ""

permissions:
  contents: write

concurrency:
  group: attach-debs-${{ github.event.release.tag_name || inputs.tag || 'manual' }}
  cancel-in-progress: false

jobs:
  attach-debs:
    runs-on: ubuntu-latest
    steps:
      - name: Determine target tag
        id: tag
        shell: bash
        env:
          INPUT_TAG: ${{ inputs.tag }}
        run: |
          set -euo pipefail
          if [[ "${GITHUB_EVENT_NAME}" == "release" ]]; then
            TAG="${{ github.event.release.tag_name }}"
          elif [[ -n "${INPUT_TAG}" ]]; then
            TAG="${INPUT_TAG}"
          else
            echo "No tag provided on manual run; trying latest releaseâ€¦"
            # requires gh (preinstalled on ubuntu-latest)
            echo "${{ github.token }}" | gh auth login --with-token
            TAG="$(gh release view --json tagName -q .tagName)"
          fi
          [[ -n "$TAG" ]] || { echo "Could not resolve a tag."; exit 1; }
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "ver=${TAG#v}" >> "$GITHUB_OUTPUT"
          echo "Will attach to release: $TAG"

      # Checkout the DEFAULT BRANCH so we can see safexec/deb committed there
      - name: Checkout default branch
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.repository.default_branch }}

      - name: Collect .deb files to upload
        id: files
        shell: bash
        run: |
          set -euo pipefail
          VER='${{ steps.tag.outputs.ver }}'
          shopt -s nullglob

          # try to match by safexec version in the filename; if not found, fall back to newest per-arch
          pick_latest() { ls -1v $1 2>/dev/null | tail -n1 || true; }

          AMD="$(ls safexec/deb/safexec_${VER}-*_amd64.deb 2>/dev/null | head -n1 || true)"
          ARM="$(ls safexec/deb/safexec_${VER}-*_arm64.deb 2>/dev/null | head -n1 || true)"

          if [[ -z "$AMD" ]]; then AMD="$(pick_latest 'safexec/deb/safexec_*_amd64.deb')"; fi
          if [[ -z "$ARM" ]]; then ARM="$(pick_latest 'safexec/deb/safexec_*_arm64.deb')"; fi

          FILES=()
          [[ -n "$AMD" && -f "$AMD" ]] && FILES+=("$AMD")
          [[ -n "$ARM" && -f "$ARM" ]] && FILES+=("$ARM")
          [[ -f "safexec/deb/SHA256SUMS" ]] && FILES+=("safexec/deb/SHA256SUMS")

          if [[ ${#FILES[@]} -eq 0 ]]; then
            echo "No .deb files found in safexec/deb/"
            exit 1
          fi

          printf 'Resolved files:\n%s\n' "${FILES[@]}"
          {
            echo 'files<<__EOL__'
            printf '%s\n' "${FILES[@]}"
            echo '__EOL__'
          } >> "$GITHUB_OUTPUT"

      - name: Upload assets (overwrite if already present)
        env:
          GH_TOKEN: ${{ github.token }}
          TAG_NAME: ${{ steps.tag.outputs.tag }}
        shell: bash
        run: |
          set -euo pipefail
          echo "${GH_TOKEN}" | gh auth login --with-token
          gh release view "${TAG_NAME}" >/dev/null

          mapfile -t TO_UPLOAD < <(printf '%s\n' "${{ steps.files.outputs.files }}")
          echo "Uploading to ${TAG_NAME}:"
          printf '  %s\n' "${TO_UPLOAD[@]}"
          gh release upload "${TAG_NAME}" "${TO_UPLOAD[@]}" --clobber
